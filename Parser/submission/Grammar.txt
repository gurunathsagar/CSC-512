Author: Gurunath Ashok Hanamsagar
UnityID: ghanams

This is the grammar obtained after removing recursion and factoring. Hence this is LL(1)

<program> --> empty
			| <type name> ID <program z>

<program z> --> left_parenthesis <func decl z> <func z> <func list z>
			| comma <id> <id list p> semicolon <data decls> <program z1>
			| semicolon <data decls> <program z1>
			| left_bracket <expression> right_bracket <program z7>

<program z7> --> semicolon <data decls> <program z1>
			| comma <id> <id list p> semicolon <data decls> <program z1>

<program z1> --> <type name> ID left_parenthesis <func decl z> <func z> <func list>
				| empty

<func list> --> <func> <func list z> 
				
<func list z> --> empty
				| <func list>

<func> --> <func decl> <func z>

<func z> --> semicolon 
		| left_brace <func z6>

<func z6> --> <data decls> <func z7>
			| <statements> right_brace
			| right_brace

<func z7> --> <statements> right_brace
			| right_brace

<func decl> --> <type name> ID left_parenthesis <func decl z>

<func decl z> --> right_parenthesis
				| void <func decl z2>
				| int ID <func decl z3>
				| binary ID  <func decl z3>
				| decimal ID <func decl z3>

<func decl z2> --> right_parenthesis
				 | ID <func decl z6>
				 
<func decl z6> --> right_paranthesis
				|  <non-empty list p> right paranthesis

<func decl z3> --> comma <type name> ID <non-empty list p> right_parenthesis
				|  right_parenthesis

<type name> --> int 
				| void 
				| binary 
				| decimal  
				
<non-empty list p> --> empty
					|	comma <type name> ID <non-empty list p>

<data decls> -->  <type name> <id list> semicolon <data decls z>

<data decls z> --> empty 
				| <type name> <id list> semicolon <data decls z>
				
<id list> --> <id> <id list z>

<id list z> --> empty
			  | <id list p>

<id list p> --> comma <id> <id list p z>

<id list p z> --> empty 
				| <id list p>

<id> --> ID <id z>

<id z> -> empty
		| left_bracket <expression> right_bracket								


<block statements> --> left_brace <block statements z>
					
<block statements z> --> <statements> right_brace
						| right_brace

<statements> --> <statement> <statements z>		

<statements z> --> empty
				|  <statement> <statements z>

<statement> --> ID <statement z>
			| <if statement> 
			| <while statement> 
			| <return statement> 
			| <break statement> 
			| <continue statement> 
			| read left_parenthesis  ID right_parenthesis semicolon 
			| write left_parenthesis <expression> right_parenthesis semicolon 
			| print left_parenthesis  STRING right_parenthesis semicolon 

<statement z> --> left_bracket <expression> right_bracket equal_sign <expression> semicolon
				| equal_sign <expression> semicolon
				| left_parenthesis <statement z1>
				
<statement z1> --> right_parenthesis semicolon
				 | <expr list> right_parenthesis semicolon						 

<expr list> --> <expression> <non-empty expr list p>

<non-empty expr list p> --> comma <expression> <non-empty expr list p>
						  | empty

<if statement> --> if left_parenthesis <condition expression> right_parenthesis <block statements>

<condition expression> -->  <condition> <condition expression z>

<condition expression z> --> <condition op> <condition>
							| empty

<condition op> --> double_and_sign 
				 | double_or_sign

<condition> --> <expression> <comparison op> <expression> 

<comparison op> --> == 
				  | != 
				  | > 
				  | >= 
				  | < 
				  | <=
						  
<while statement> --> while left_parenthesis <condition expression> right_parenthesis <block statements>

<return statement> --> return <return statement z>

<return statement z> --> <expression> semicolon 
					 | semicolon 
					 
<break statement> ---> break semicolon 

<continue statement> ---> continue semicolon						  
						  
<expression> --> <term> <expression p>

<expression p> --> <addop> <term> <expression p>
				 | empty

<addop> --> plus_sign 
		  | minus_sign 

<term> --> <factor> <term p>

<term p> --> <mulop> <factor> <term p>
			| empty
						  
<mulop> --> star_sign 
		  | forward_slash 

<factor> --> ID <factor z>
			| NUMBER 
			| minus_sign NUMBER 
			| left_parenthesis <expression> right_parenthesis
				  
<factor z> --> empty
			| left_bracket <expression> right_bracket 
			| left_parenthesis <factor z1>
			
<factor z1> --> right_parenthesis
			  | <expr list> right_parenthesis
						  

Total number of  non-terminals: 54
Total number of production rules: 112

Proof for first+ of each production:

